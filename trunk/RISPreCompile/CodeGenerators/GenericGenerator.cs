using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.IO;

namespace RIS.RISPreCompile.CodeGenerators
{
    public abstract class GenericGenerator
    {
        abstract protected string GetXMLFilePath();
        abstract protected string GetOutputPath();
        abstract protected string GetNameSpace();
        abstract protected string[] GetIncludes();
        abstract protected string GetExtends();

        protected StreamWriter outputFile;

        private int currentTab = 0;

        public abstract void Generate();
    
        protected XmlDocument GetDocument()
        {
            XmlDocument document = new XmlDocument();
            document.Load(GetXMLFilePath());
            return document;
        }
        
        protected void OpenFile(string fileName)
        {
            string filePath = GetOutputPath() + "/" + fileName + ".cs";
            if (File.Exists(filePath))
                File.Delete(filePath);
            outputFile =  new StreamWriter(filePath);
            WriteLine("// Generated by CodeGenerator");
            WriteLine("// DO NOT MODIFY!");
            foreach(string include in GetIncludes())
            {
                WriteLine("using " + include + ";");
            }
            WriteLine("namespace " + GetNameSpace());
            OpenBlock();
            WriteLine("public class " + fileName + " : " + GetExtends() );
            OpenBlock();
        }

        protected void CloseFile()
        {
            CloseBlock();
            CloseBlock();
            outputFile.Close();
        }

        protected void WriteLine(string text)
        {
            for (int i = 0; i < currentTab; i++)
            {
                outputFile.Write("\t");
            }
            outputFile.WriteLine(text);
            //outputFile.WriteLine(";");
        }

        protected void AddProperty(string type,string name,string varName)
        {            
            WriteLine("public " + type + " " + name);
            OpenBlock();
            WriteLine("get");
            OpenBlock();
            WriteLine("return this." + varName + ";");
            CloseBlock();
            WriteLine("set");
            OpenBlock();
            WriteLine("this." + varName + " = value;");
            CloseBlock();
            CloseBlock();
        }

        /*protected void AddReadOnlyStaticProperty(string type, string name, string value)
        {
            WriteLine("public static " + type + " " + name);
            OpenBlock();
            WriteLine("get");
            OpenBlock();
            WriteLine("return " + value + ";");
            CloseBlock();
            CloseBlock();
        }*/

        protected void OpenBlock()
        {
            WriteLine("{");
            currentTab++;
        }

        protected void CloseBlock()
        {
            currentTab--;
            WriteLine("}");           
        }
    }
}
